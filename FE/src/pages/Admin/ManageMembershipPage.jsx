import { useState, useEffect } from "react";
import { FaSearch } from "react-icons/fa";
import "./styles/ManageMembershipPage.scss";
import MembershipDetailModal from "../../components/Admin/MembershipDetailModal";
import AdminPasswordModal from "../../components/Admin/AdminPasswordModal";
import axios from 'axios';

const itemsPerPage = 8;

const ManageMembershipPage = () => {
  const [transactions, setTransactions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [searchQuery, setSearchQuery] = useState("");
  const [sortConfig, setSortConfig] = useState({
    key: 'date',
    direction: 'desc'
  });
  const [typeFilter, setTypeFilter] = useState("");
  const [statusFilter, setStatusFilter] = useState("");
  const [selectedTransaction, setSelectedTransaction] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [showPasswordModal, setShowPasswordModal] = useState(false);
  const [pendingTransaction, setPendingTransaction] = useState(null);

  // Fetch data from API
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const response = await axios.get('http://localhost:5000/api/history-packages');
        if (response.data.success) {
          setTransactions(response.data.data);
        } else {
          setError('Failed to fetch data');
        }
      } catch (error) {
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  // H√†m x·ª≠ l√Ω khi thay ƒë·ªïi t√¨m ki·∫øm
  const handleSearchChange = (e) => {
    setSearchQuery(e.target.value);
    setCurrentPage(1);
  };

  // H√†m x·ª≠ l√Ω khi thay ƒë·ªïi b·ªô l·ªçc lo·∫°i h·ªôi vi√™n
  const handleTypeFilterChange = (e) => {
    setTypeFilter(e.target.value);
    setCurrentPage(1);
  };

  // H√†m x·ª≠ l√Ω khi thay ƒë·ªïi b·ªô l·ªçc tr·∫°ng th√°i
  const handleStatusFilterChange = (e) => {
    setStatusFilter(e.target.value);
    setCurrentPage(1);
  };

  // H√†m x·ª≠ l√Ω khi thay ƒë·ªïi c√°ch s·∫Øp x·∫øp
  const handleSort = (key) => {
    let direction = 'asc';
    if (sortConfig.key === key && sortConfig.direction === 'asc') {
      direction = 'desc';
    }
    setSortConfig({ key, direction });
    setCurrentPage(1);
  };

  // H√†m x·ª≠ l√Ω khi click v√†o m·ªôt d√≤ng trong b·∫£ng
  const handleRowClick = async (transaction) => {
    try {
      const response = await axios.get(`http://localhost:5000/api/history-packages/${transaction._id}`);
      if (response.data.success) {
        setPendingTransaction(response.data.data);
        setShowPasswordModal(true);
      }
    } catch (error) {
      console.error('Error fetching transaction details:', error);
    }
  };

  // Th√™m h√†m ƒë·ªÉ x·ª≠ l√Ω thay ƒë·ªïi tr·∫°ng th√°i
  const handleStatusChange = async (transactionId, newStatus) => {
    try {
      const response = await axios.put(`http://localhost:5000/api/history-packages/${transactionId}`, { status: newStatus });
      if (response.data.success) {
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i trong transactions state
        const updatedTransactions = transactions.map(transaction => {
          if (transaction._id === transactionId) {
            return {
              ...transaction,
              status: newStatus
            };
          }
          return transaction;
        });
        
        setTransactions(updatedTransactions);
        setShowModal(false);
      }
    } catch (error) {
      console.error('Error updating status:', error);
    }
  };

  // Th√™m h√†m ƒë·ªÉ x·ª≠ l√Ω th√†nh c√¥ng x√°c th·ª±c
  const handlePasswordConfirm = () => {
    setShowPasswordModal(false);
    setSelectedTransaction(pendingTransaction);
    setShowModal(true);
    setPendingTransaction(null);
  };

  // Th√™m h√†m ƒë√≥ng modal password
  const handlePasswordModalClose = () => {
    setShowPasswordModal(false);
    setPendingTransaction(null);
  };

  // H√†m ƒë√≥ng modal
  const handleCloseModal = () => {
    setShowModal(false);
    setSelectedTransaction(null);
  };

  // L·ªçc v√† s·∫Øp x·∫øp danh s√°ch giao d·ªãch
  const filteredTransactions = transactions
    .filter(transaction => {
      return (
        (transaction.id_user?.username?.toLowerCase().includes(searchQuery.toLowerCase()) ||
         transaction._id?.toLowerCase().includes(searchQuery.toLowerCase())) &&
        (!typeFilter || transaction.packageId?.name === typeFilter) &&
        (!statusFilter || transaction.status === statusFilter)
      );
    })
    .sort((a, b) => {
      if (sortConfig.key === 'date') {
        const dateA = new Date(a.createdAt);
        const dateB = new Date(b.createdAt);
        if (sortConfig.direction === 'asc') {
          return dateA - dateB;
        } else {
          return dateB - dateA;
        }
      } else if (sortConfig.key === 'price') {
        const priceA = parseInt(a.transactionId?.amount);
        const priceB = parseInt(b.transactionId?.amount);
        if (sortConfig.direction === 'asc') {
          return priceA - priceB;
        } else {
          return priceB - priceA;
        }
      }
      return 0;
    });

  const getTypeClass = (type) => {
    switch(type) {
      case 'G√≥i 1 ng√†y':
        return 'daily';
      case 'G√≥i 1 th√°ng':
        return 'monthly';
      case 'G√≥i 1 nƒÉm':
        return 'yearly';
      default:
        return '';
    }
  };

  const getStatusClass = (status) => {
    switch(status) {
      case 'Th√†nh c√¥ng':
        return 'active';
      case 'ƒêang x·ª≠ l√Ω':
        return 'pending';
      case 'Th·∫•t b·∫°i':
        return 'expired';
      case 'Ho√†n ti·ªÅn':
        return 'refunded';
      default:
        return '';
    }
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>Error: {error}</div>;
  }

  const totalPages = Math.ceil(filteredTransactions.length / itemsPerPage);
  const displayedTransactions = filteredTransactions.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  return (
    <div className="membership-management">
      <h1>üí≥ Qu·∫£n L√Ω Giao D·ªãch ƒêƒÉng K√Ω H·ªôi Vi√™n</h1>
      
      <div className="header-actions">
        <div className="search-bar">
          <FaSearch className="search-icon" />
          <input
            type="text"
            placeholder="T√¨m ki·∫øm theo t√™n ho·∫∑c m√£ giao d·ªãch..."
            value={searchQuery}
            onChange={handleSearchChange}
          />
        </div>

        <div className="filter-container">
          <select 
            value={typeFilter} 
            onChange={handleTypeFilterChange}
          >
            <option value="">T·∫•t c·∫£ g√≥i h·ªôi vi√™n</option>
            <option value="UTEBOOK 1 ng√†y">G√≥i 1 ng√†y</option>
            <option value="UTEBOOK 1 th√°ng">G√≥i 1 th√°ng</option>
            <option value="UTEBOOK 6 th√°ng">G√≥i 6 th√°ng</option>
            <option value="UTEBOOK 1 nƒÉm">G√≥i 1 nƒÉm</option>
          </select>

          <select 
            value={statusFilter} 
            onChange={handleStatusFilterChange}
          >
            <option value="">T·∫•t c·∫£ tr·∫°ng th√°i</option>
            <option value="Th√†nh c√¥ng">Th√†nh c√¥ng</option>
            <option value="ƒêang x·ª≠ l√Ω">ƒêang x·ª≠ l√Ω</option>
            <option value="Th·∫•t b·∫°i">Th·∫•t b·∫°i</option>
            <option value="Ho√†n ti·ªÅn">Ho√†n ti·ªÅn</option>
          </select>

          <button 
            className="sort-btn" 
            onClick={() => handleSort('date')}
          >
            S·∫Øp x·∫øp theo th·ªùi gian {sortConfig.key === 'date' ? (sortConfig.direction === 'asc' ? '‚Üë' : '‚Üì') : ''}
          </button>

          <button 
            className="sort-btn" 
            onClick={() => handleSort('price')}
          >
            S·∫Øp x·∫øp theo gi√° {sortConfig.key === 'price' ? (sortConfig.direction === 'asc' ? '‚Üë' : '‚Üì') : ''}
          </button>
        </div>
      </div>

      <table>
        <thead>
          <tr>
            <th>M√£ giao d·ªãch</th>
            <th>T√™n ng∆∞·ªùi d√πng</th>
            <th>Lo·∫°i h·ªôi vi√™n</th>
            <th>Th·ªùi h·∫°n</th>
            <th>Gi√°</th>
            <th>Ph∆∞∆°ng th·ª©c thanh to√°n</th>
            <th>Tr·∫°ng th√°i</th>
            <th>Ng√†y giao d·ªãch</th>
          </tr>
        </thead>
        <tbody>
          {displayedTransactions.map((transaction) => (
            <tr 
              key={transaction._id} 
              onClick={() => handleRowClick(transaction)}
              className="clickable-row"
            >
              <td>{transaction._id}</td>
              <td>{transaction.id_user?.username}</td>
              <td>
                <span className={`type-tag ${getTypeClass(transaction.packageId?.name)}`}>
                  {transaction.packageId?.name}
                </span>
              </td>
              <td>{transaction.packageId?.expire} ng√†y</td>
              <td>{parseInt(transaction.transactionId?.amount).toLocaleString()} VNƒê</td>
              <td>{transaction.transactionId?.vnp_CardType}</td>
              <td>
                <span className={`status-tag ${getStatusClass(transaction.status)}`}>
                  {transaction.status}
                </span>
              </td>
              <td>
                {new Date(transaction.createdAt).toLocaleDateString('vi-VN', {
                  day: '2-digit',
                  month: '2-digit',
                  year: 'numeric'
                })}
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {totalPages > 1 && (
        <div className="pagination">
          <button 
            className="pagination-btn" 
            onClick={() => setCurrentPage(currentPage - 1)} 
            disabled={currentPage === 1}
          >
            Tr∆∞·ªõc
          </button>
          <span>Trang {currentPage} / {totalPages}</span>
          <button 
            className="pagination-btn" 
            onClick={() => setCurrentPage(currentPage + 1)} 
            disabled={currentPage === totalPages}
          >
            Ti·∫øp
          </button>
        </div>
      )}

      {showPasswordModal && (
        <AdminPasswordModal
          onClose={handlePasswordModalClose}
          onConfirm={handlePasswordConfirm}
        />
      )}

      {showModal && selectedTransaction && (
        <MembershipDetailModal
          membership={selectedTransaction}
          onClose={handleCloseModal}
          onStatusChange={handleStatusChange}
        />
      )}
    </div>
  );
};

export default ManageMembershipPage; 